# Set the node type to Full node, Archive node, or Light node.
# Possible values are "full", "archive", or "light".
# The command line parameter `--full`, `--archive`, or `--light` will overwrite this parameter.
#

bootnodes="mazzenode://ec9f4570fab69ca41d53ddbb9fc298308afac79a30d30894af6f5d457b753f3aafb061a6bd34cd3b08a810eab7965b41fe8639374d0eccb8ca15361d110b5f92@213.239.196.134:55555,mazzenode://c96bc4c20a67631b07f2103bd3c09d9e09d679be7867c3a425da5e6bac4da96d74914038c5ee41bcc04497a762c4de7346be562da9dabf8072dcfb2b7e8a09f6@65.109.20.32:55555,mazzenode://fca6f7d5db9e5af3d96eeacb7afbc06ef8a8c06ae56f4170d2dcb6edb136b1c5882b8f5118ee5f177727d01816a83d82ec3794a9f8b5691f25f30222305fc7fe@65.109.31.54:55555,mazzenode://9208202436865c52385d7e40691c14c2fcb4f6b8a8921a5fcec7871e6da9d90f8ebffa3ca785c24ac537d924a5b63520f0dd4481a6a12aae274ff24a571ba384@65.109.34.231:55555,mazzenode://2f72e303ddc8ed2e0402a1b8984dd7bf2d809e1e95ce829c83e1169b06a09a4c971c51b8a5d29ac61604bc2d8fedeb092194cc9356f522922425dbffb3a7b0ca@37.27.140.163:55555,mazzenode://8643a97bd0531a1fd4a2939879bec173c84ce7e369995622c80ce2aada80d5ea60aaaec4f4f5d135a2bed1bddddb8d6a082920a5323369a26c684cc7d1dece0b@37.27.140.162:55555,mazzenode://a781917862300eb258b313e42a22c0262d7e849620cb9c0472b727e6e3c4b4ba66974945cd7eb69394f713ee43918f9f27cedc43cbd485ddc4e477a198887c1d@37.27.140.161:55555"

node_type = "full"

# Some preset develepment configurations.
# It should not be set in production environment.
#
# For both `test` and `dev` modes, we will
#     * Set initial difficulty to 4
#
# `test` mode is for Mazze testing and debugging, we will
#     * Add latency to peer connections
#     * Skip handshake encryption check
#     * Skip header timestamp verification
#     * Handle NewBlockHash even in catch-up mode
#     * Allow data propagation test
#     * Allow setting genesis accounts and generate tx from secrets
#
# `dev` mode is for users to run a single node that automatically
#     generates blocks with fixed intervals
#     * You are expected to also set `jsonrpc_ws_port`, `jsonrpc_tcp_port`,
#       and `jsonrpc_http_port` if you want RPC functionalities.
#     * generate blocks without PoW (either after receiving a transaction or
#       in fixed period, see ``dev_block_interval_ms'')
#     * Skip catch-up mode even there is no peer
#
# mode = "test"
#catch_up_mode = false
# If you want to setup a single node running Mazze for development. You should
# COMMENT the bootnodes setting and you should use the following parameters:
#
# mode = "dev"

# ``dev_block_interval_ms'' controls the mining rate in the dev mode.
#
# If it's not set, blocks will only be generated after receiving a transaction.
# Otherwise, blocks are automatically generated every ``dev_block_interval_ms'' ms.
#
# dev_block_interval_ms = 500

# ----------------- Mining Configuration -----------------

# `mining_author` is the address to receive mining rewards.
# If set, `mining_type` will be "stratum" by default.
# The value is a 40-digit hex string or a valid CIP-37 base32 address.
# By default, the value is not set.
#
mining_author="0x1e4eaf458e93ad4331e046c72fafc78c1bbba7b5"

# `mining_type` controls whether the mining process goes through the
# stratum protocol, uses CPU-mining, or disable mining.
# Possible values are "stratum", "cpu", and "disable".
# The default value is "stratum" if `mining_author` is set.
# If the value is set and not "disable", `mining_author` must be set.
#
#  mining_type = "stratum"

# Listen address for stratum
#
stratum_listen_address = "0.0.0.0"
# stratum_listen_address = "213.239.196.134"

# Port for stratum.
#
 stratum_port = 32525

# Window size for PoW manager
#
 pow_problem_window_size = 1

# Secret key for stratum.
# The value is 64-digit hex string.
# If not set, the RPC subscription will not check the authorization.
#
 stratum_secret = "9c22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664fb9a3cb658"

# -------------- Log-related Configuration -------------

# `log_conf` the path of the log4rs configuration file. The configuration in the file will overwrite the value set by `log_level`.
# By default, the value is not set.
#
# log_conf="log.yaml"

# `log_file` is the path of the log file"
# If not set, the log will only be printed to stdout, and not persisted to files.
# By default, the value is not set.
#
# log_file="Mazze.log"

# `log_level` is the printed log level.
# The value should be one of "error", "warn", "info", "debug", "trace", "off"
#
log_level="debug"

# -------------- Network Configuration -------------

# `public_address` is the address of this node used for other nodes to connect to.
# If not set, the process will try to find out the public IP with best effort, and use `tcp_port` as public port.
# However, it's HIGHLY RECOMMENDED to set the value manually, especially for machines with IP translated by NAT.
#
public_address="37.27.134.37"

# `tcp_port` is the TCP port that the process listens for P2P messages. The default is 55555.
#
 tcp_port=55555

# `public_tcp_port` is the public TCP port that other nodes should connect to. It might be different from
# the tcp_port in case the machine is behind a NAT. The default is as same as `tcp_port`.
#
# public_tcp_port=55555

# `udp_port` is the UDP port used for node discovery.
# If not set, it will be the same as `port`.
#
# udp_port=55555

# `jsonrpc_http_threads` is used to control how many threads to process HTTP rpc requests.
#
# jsonrpc_http_threads=1

# `jsonrpc_http_keep_alive` is used to control whether to set KeepAlive for rpc HTTP connections.
#
# jsonrpc_http_keep_alive=false

# `jsonrpc_cors` is used to control the rpc domain validation policies.
# The value should be "none", "all", or a list string split by commas without space.
# If not set, domain validation is disabled.
# By default, the values are not set.
#
# jsonrpc_cors="all"

# The following parameters are the ports for the node to provide rpc service. If not set,
# the node will not start rpc services. By default, the `jsonrpc_local_http_port` is set,
# so as to support the Mazze CLI subcommands. What's provided here is the recommended
# value if you want to start rpc services for other front-end applications.
# Note that to serve transaction-related RPCs, `persist_tx_index` should also be set to `true` or
# the node will only be able to handle very recent transactions.
#
 jsonrpc_ws_port=52535
 jsonrpc_tcp_port=52536
 jsonrpc_http_port=52537
#jsonrpc_local_tcp_port=12538
#jsonrpc_local_http_port=12539
#jsonrpc_local_ws_port=12540
jsonrpc_http_eth_port=58545
jsonrpc_ws_eth_port=58546

# Specify the APIs available through the public JSON-RPC interfaces (HTTP, TCP, WebSocket)
# using a comma-delimited list of API names.

# Possible Core space names are: all, safe, mazze, pos, debug, pubsub, test, trace, txpool.
# `safe` only includes `mazze` and `pubsub`, `txpool`.
 public_rpc_apis = "all"

# Possible eSpace names are: eth, ethpubsub, ethdebug.
# `evm` only includes `eth` and `ethpubsub`
 public_evm_rpc_apis = "evm"

# --------------- Performance-related Network Parameters ----------------------

# Timeout for block-related requests (GetBlock, GetCmpctBlock, GetBlockTxn)
#
# blocks_request_timeout_ms = 20_000

# Time interval to check timeout requests periodically.
#
# check_request_period_ms=5000

# Chunk size for snapshot retrieval
#
# chunk_size_byte = 4194304

# Control whether to demote peers to unstrusted
#
# demote_peer_for_timeout = false

# Maximum network queue size. When reached, the queue will refuse any new data.
# The unit is MB.
#
# egress_queue_capacity = 256

# Minimum queue size for throttling in manner of ratio.
# The unit is MB.
#
# egress_min_throttle = 10

# Maximum queue size for throttling in manner of ratio.
# The unit is MB.
#
# egress_max_throttle = 10

# Time interval to garbage-collect not block-graph-ready blocks periodically.
#
# expire_block_gc_period_s = 900

# Timeout for header-related requests (GetBlockHeaders)
#
# headers_request_timeout_ms=10_000

# Time interval to broadcast Status as heartbeat periodically
#
# heartbeat_period_interval_ms = 30_000

# Time to maintain transaction digests inflight status.
#
# inflight_pending_tx_index_maintain_timeout_ms = 30_000

# Maximum number of timeout allowed in `timeout_observing_period_s`.
# If the max is reached, the peer will be disconnected.
# `demote_peer_for_timeout` controls if the peer will be demoted in this case.
#
# max_allowed_timeout_in_observing_period = 10

# Maximum number of peers to download state chunks from.
#
# max_download_state_peers = 8

# Maximum number of handshaking sessions at the same time.
#
# max_handshakes = 64

# Maximum number of incoming connections.
#
# max_incoming_peers = 64

# Maximum number of outgoing connections.
#
# max_outgoing_peers = 16

# Maximum number of outgoing connections to archive nodes. 0 represents
# not required to connect to archive nodes. E.g. light node or full node
# need not to connect to archive nodes.
#
# max_outgoing_peers_archive = 0

# Maximum number of inflight requests for each peer.
# If the max is reached, requests will be buffered until inflight requests are responded or timeout.
#
# max_inflight_request_count = 64

# Maximum number of peers to broadcast transaction digests.
#
# max_peers_tx_propagation = 128

# Maximum cached received block size waiting to be processed.
#
# max_unprocessed_block_size_mb = 128

# Minimum number of peers to broadcast transaction digests.
#
# min_peers_tx_propagation = 8

# Minimum number of normal-phase peers to estimate the current global latest epoch for phase change.
#
# min_phase_change_normal_peer_count = 3

# The time to maintain received transactions to avoid duplicated requests.
#
# received_tx_index_maintain_timeout_ms = 300_000

# Whether to request blocks with public key during catch-up to avoid recovering
# the public keys for transactions.
#
request_block_with_public = false

# Time interval to broadcast transaction digests periodically.
#
# send_tx_period_ms = 1300

# Timeout for requesting snapshot candidate.
#
# snapshot_candidate_request_timeout_ms = 10_000

# Timeout for requesting snapshot chunks.
#
# snapshot_chunk_request_timeout_ms = 30_000

# Timeout for requesting snapshot manifests.
#
# snapshot_manifest_request_timeout_ms = 30_000

# `throttling_conf` is configuration file in TOML format to throttle RPCs, P2P messages.
# Throttling is enabled only when the parameter specified.
#
# throttling_conf="throttling.toml"

# The time period to observe if a peers has too many timeouts.
#
# timeout_observing_period_s = 600

# Timeout for transaction requests.
#
# transaction_request_timeout_ms = 30_000

# Time to maintain information of sent-out transactions for answering requests.
#
# tx_maintained_for_peer_timeout_ms = 600_000

# --------------- Peer Management Parameters -------------

# Timeout duration for refreshing discovery protocol when there are NOT enough outgoing connections.
#
# discovery_fast_refresh_timeout_ms = 10_000

# Timeout duration for initiating peer connection management.
#
# discovery_housekeeping_timeout_ms = 1_000

# Period between consecutive rounds of the same current discovery process.
#
# discovery_round_timeout_ms = 500

# `enable_discovery` is used to control whether the node will ask its neighbors for new peers
# and whether it will respond to other nodes' discovery requests.
#
# enable_discovery=true

# `netconf_dir` is the directory to store network related persistent data, including `net_key`,
# a list of trusted nodes and a list of untrusted nodes.
#
# By default, it is stored under the directory configured with `Mazze_data_dir` with the directory name `net_config`.
# If set, the directory path will not be related to `Mazze_data_dir` anymore.
#
# netconf_dir="./blockchain_data/net_config"

# `net_key` is the 256-bit private key to generate a unique node id for this node.
# The value is a 64-digit hex string.
# If not set, the node will try to read from the file "key" under the directory `netconf_dir`.
# If the file is not found, the node will generate a random key.
# By default, the value is not set.
# If a node is restarted, it's suggested to keep the key unchanged.
#
# net_key="aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"

# Timeout duration for persisting node table.
#
# node_table_timeout_s = 300

# Connection lifetime threshold for promotion.
#
# node_table_promotion_timeout_s = 259200


# `session_ip_limits` limits the number of TCP connections per IP address or subnet for security consideration.
# Its format is "n1,n2,n3,n4", where n1 is the quota of TCP connections for a single IP address, and n2/n3/n4
# are the quotas for subnet a/b/c. The default value is "1,8,4,2", which means:
#   1) Only 1 TCP connection allowed for a single IP address.
#   2) 8 TCP connections allowd for subnet a, e.g. 192.xxx.xxx.xxx/8
#   3) 4 TCP connections allowd for subnet b, e.g. 192.168.xxx.xxx/16
#   4) 2 TCP connections allowd for subnet c, e.g. 192.169.0.xxx/24
# Note, 0 represents unlimited.
#
# session_ip_limits="1,8,4,2"

session_ip_limits="1,32,16,4"

# `subnet_quota` limits the number of nodes for a subnet B (e.g. 192.168.xxx.xxx/16) stored in database.
# Nodes in database are used to establish outgoing TCP connections for P2P communications.
# Note, 0 represents unlimited.
#
# subnet_quota=32

# ---------------- Block number index parameters -----------------

# Whether to persist block number indices.
# This only needs to be enabled if you want to use RPCs that take block numbers as an input.
#
 persist_block_number_index = true

# ---------------- Transaction Cache Parameters -----------------

# Whether to persist transaction indices.
# This only needs to be enabled if you want to reliably answer transaction-related RPCs.
#
 persist_tx_index = false

# Time to keep transactions in in-memory transaction cache.
#
# tx_cache_index_maintain_timeout_ms = 300_000

# Maximum number of transactions allowed in the transaction pool.
#
# tx_pool_size = 50_000

# Minimum allowed transaction gas price for two spaces in the transaction pool.
#
# tx_pool_min_native_tx_gas_price = 1_000_000_000
# tx_pool_min_eth_tx_gas_price = 20_000_000_000

# ------------------ Storage Parameters ----------------------

# The number of additional snapshot before the current stable checkpoint that we will maintain.
# If it's 0, all snapshot before stable genesis will be deleted and the states are unavailable.
#
# additional_maintained_snapshot_count = 0

# The additional number of epochs to keep different kinds of data before the current era genesis checkpoint.
# For full/light nodes, the default value is 0, meaning all data before the era checkpoint will be removed.
# For archive nodes, the default behavior is keeping all these data, while setting these parameters manually
# will overwrite the default behavior of corresponding data types and garbage collect them accordingly.
#
# additional_maintained_block_body_epoch_count = 0
# additional_maintained_execution_result_epoch_count = 0
# additional_maintained_reward_epoch_count = 0
# additional_maintained_trace_epoch_count = 0
# additional_maintained_transaction_index_epoch_count = 0

# Time interval to evict old data from in-memory data cache.
#
# block_cache_gc_period_ms = 5_000

# Database type to store block-related data.
# Supported: rocksdb, sqlite.
#
# block_db_type = "rocksdb"

# The root directory of all data (block data, state data, and node database).
#
# mazze_data_dir = "./blockchain_data"

# The directory to store block-related data.
#
# By default, it is stored under the directory configured with `mazze_data_dir` with the directory name `blockchain_db`.
# If set, the directory path will not be related to `mazze_data_dir` anymore.
#
# block_db_dir = "./blockchain_data/blockchain_db"

# Maximum size of cached ledger data (block, receipts, e.t.c.)
# The unit is MB.
#
# ledger_cache_size = 1024

# Rocksdb cache size.
# Only applies if `block_db_type = "rocksdb"`.
#
# rocksdb_cache_size = 128

# Rocksdb compaction file path.
# Only applies if `block_db_type = "rocksdb"`.
# If not set, compaction configuration will be set automatically by rocksdb.
#
# rocksdb_compaction_profile = "./compact_file.conf"

# State storage parameters.
# Refer to the documentation for details.
#
# storage_delta_mpts_cache_recent_lfu_factor=4.0
# storage_delta_mpts_cache_size=20000000
# storage_delta_mpts_cache_start_size=1000000
# storage_delta_mpts_node_map_vec_size=80000000
# storage_delta_mpts_slab_idle_size=200000

# Configure the maximal open MPT count. Open MPTs are maintained as an LRU cache, and we will close the database handle
# for the evicted MPT once its usage finishes. Every MPT contains the data written in 2000 epochs.
# Accessing a state involves opening both its delta MPT and intermediate MPT,
# so setting this to 4 allows to access two states at the same time. A full node always needs one latest state to
# process new epochs, so with the default value we can frequently access one old state (by calling state-related RPCs)
# efficiently without the overhead of opening/closing databases.
#
# Idealy, if the RPC working set involves accessing X state ranges frequently (each range has 2000 epochs),
# this value should be set to 2+2X to avoid thrashing.
# However, increasing the value may increase the system memory usage by opening more database instances at the same
# time, and the memory usage of an MPT is affected by `rocksdb_cache_size`.
#
# storage_max_open_mpt_count = 4

# Configure if we strictly check the tx index before garbage collection.
# Setting it to `false` will improve the performance. But if the value is `false`, it's possible that although the
# epoch where a tx is executed should not be garbage collected, the tx index of this tx is removed because it's packed
# in an already garbage collected epoch.
#
# strict_tx_index_gc = true

# The epoch number where we want to download the state and start re-executing transactions.
# For full nodes, if the value is not set, the parameter will not take effects.
# For archive node, the default value is 0.
#
# sync_state_starting_epoch = 0

# The number of epochs needed between our best_epoch and our neighbours' best_epoch that we want to
# start downloading states during catching up.
#
# sync_state_epoch_gap = 20

# ------------------ Light Node Parameters ----------------------

# Header sync parameters.
# ln_header_request_batch_size = 30
# ln_header_request_timeout_sec = 2
# ln_max_headers_in_flight = 1000

# Epoch sync parameters.
# ln_epoch_request_batch_size = 100
# ln_epoch_request_timeout_sec = 2
# ln_max_parallel_epochs_to_request = 10
# ln_num_epochs_to_request = 200
# ln_num_waiting_headers_threshold = 1000

# -------------------- Trace Parameters -------------------

# Whether to trace EVM execution and records the result in database.
#
# executive_trace = false


# -------------------- Others -------------------

# Time (in milliseconds) after which accounts are re-read from disk.
#
# account_provider_refresh_time_ms = 1000

# Whether to allow execution without deferring if the execution thread is idle.
#
# enable_optimistic_execution = true

# Maximum number of blocks whose timestamp is in the near future is maintained in memory.
#
# future_block_buffer_capacity = 32768

# Maximum number of log entries returned from mazze_getLogs and eth_getLogs.
# If not set, mazze_getLogs and eth_getLogs will not limit the number of logs returned.
#
get_logs_filter_max_limit = 5000

# Epoch batch size used in log filtering.
# Larger batch sizes may improve performance but might also prevent consensus from making progress under high RPC load.
#
# get_logs_epoch_batch_size = 32

# The maximal allowed number of epochs between `from_epoch` and `to_epoch` in the filter to call `mazze_getLogs`.
# If not set, there is no limit on the gap.
# By default it is not set.
#
# get_logs_filter_max_epoch_range = 10000

# The maximal allowed number of blocks between `from_block` and `to_block` in the filter to call `mazze_getLogs`.
# If not set, there is no limit on the gap.
# By default it is not set.
#
# get_logs_filter_max_block_number_range = 10000

# Maximum number of transactions allowed for peers to send to a catch-up node.
#
# max_trans_count_received_in_catch_up = 60_000

# The chain ID of Mazze Network (Mazze space)
# 1 for testnet
# 1990 for Mainnet (Hydra)
#
chain_id = 1990

# The EVM chain ID of Mazze Network (EVM space)
# 1030 for Mainnet (Hydra)
#
evm_chain_id = 1991
hydra_transition_number = 1
hydra_transition_height = 1
cip43_init_end_number = 1
pos_reference_enable_height = 1


# genesis_secrets="genesis_secrets.toml"
